<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.0">
    <CVS>$Id: TicketBarcode.sopm,v 1.1.1.1 2011/12/15 07:49:58 rb Exp $</CVS>
    <Name>TicketBarcode</Name>
    <Version>0.1.4</Version>
    <Framework>3.0.x</Framework>
    <Vendor>Perl-Services.de</Vendor>
    <URL>http://www.perl-services.de/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description Lang="en">Print barcodes in ticket pdfs.</Description>
    <Description Lang="de">Gib Barcodes in Ticket-PDFs aus.</Description>
    <ModuleRequired Version="1.15">GD::Barcode</ModuleRequired>
    <PackageRequired Version="1.0.0">KIXCore</PackageRequired>
    <Filelist>
        <File Permission="644" Location="Kernel/Config/Files/TicketBarcode.xml"/>
        <File Permission="644" Location="TicketBarcode/Kernel/Modules/AgentTicketPrint.pm"/>
        <File Permission="644" Location="Custom/Kernel/System/Ticket/Barcode.pm"/>
        <File Permission="644" Location="var/packagesetup/TicketBarcode.pm"/>
    </Filelist>
    <DatabaseInstall>
        <TableCreate Name="ps_ticket_barcode">
            <Column Name="ticket_id" Type="BIGINT" Required="True" />
            <Column Name="b_value" Type="VARCHAR" Size="250"  Required="True" />
            <Column Name="b_type" Type="VARCHAR" Size="250" Required="True" />
            <Column Name="b_height" Type="INTEGER" Required="True" />
            <Column Name="b_width" Type="INTEGER" Required="True" />
            <Column Name="barcode" Type="VARCHAR" Size="250" Required="True" />
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUninstall>
        <TableDrop Name="ps_ticket_barcode" />
    </DatabaseUninstall>
    <CodeInstall Type="post">
        my $FunctionName = 'CodeInstall';
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );
            if ($CodeObject) {
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; "Could not call method new() on $CodeModule.pm."
                );
            }
        }
    </CodeInstall>
    <CodeUpgrade Type="post">
        my $FunctionName = 'CodeUpgrade';
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );
            if ($CodeObject) {
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; "Could not call method new() on $CodeModule.pm."
                );
            }
        }
    </CodeUpgrade>
    <CodeUninstall Type="pre">
        my $FunctionName = 'CodeUninstall';
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );
            if ($CodeObject) {
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; "Could not call method new() on $CodeModule.pm."
                );
            }
        }
    </CodeUninstall>
    <CodeReinstall Type="post">
        my $FunctionName = 'CodeReinstall';
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}-&gt;{Name}-&gt;{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        if ( $Self-&gt;{MainObject}-&gt;Require($CodeModule) ) {
            my $CodeObject = $CodeModule-&gt;new( %{$Self} );
            if ($CodeObject) {
                if ( !$CodeObject-&gt;$FunctionName(%{$Self}) ) {
                    $Self-&gt;{LogObject}-&gt;Log(
                        Priority =&gt; 'error',
                        Message  =&gt; "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }
            else {
                $Self-&gt;{LogObject}-&gt;Log(
                    Priority =&gt; 'error',
                    Message  =&gt; "Could not call method new() on $CodeModule.pm."
                );
            }
        }
    </CodeReinstall>
</otrs_package>
